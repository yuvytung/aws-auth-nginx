# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;



#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http
{

    include       mime.types;
    default_type  application/octet-stream;

    # Enables or disables the use of underscores in client request header fields.
    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.
    # underscores_in_headers off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

        # Log in JSON Format
        # log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
        # '"remote_addr": "$remote_addr", '
        #  '"body_bytes_sent": $body_bytes_sent, '
        #  '"request_time": $request_time, '
        #  '"response_status": $status, '
        #  '"request": "$request", '
        #  '"request_method": "$request_method", '
        #  '"host": "$host",'
        #  '"upstream_addr": "$upstream_addr",'
        #  '"http_x_forwarded_for": "$http_x_forwarded_for",'
        #  '"http_referrer": "$http_referer", '
        #  '"http_user_agent": "$http_user_agent", '
        #  '"http_version": "$server_protocol", '
        #  '"nginx_access": true }';
        # access_log /dev/stdout nginxlog_json;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    # Don't reveal OpenResty version to clients.
    # server_tokens off;

    server
    { # drawio application

        listen                                      8080;
        listen                                      [::]:8080;
        default_type                          text/plain;
        lua_need_request_body     on;

        location /
        {
            auth_basic "off";
            if ($request_method = 'OPTIONS')
            {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Headers "X-Requested-With,Content-Type,Content-Length,Authorization";
                return 204;
            }

            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            proxy_http_version 1.1;
            proxy_set_header Connection "keep-alive";
            proxy_set_header Proxy-Connection "keep-alive";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            rewrite_by_lua_block
            {
                local sha = require("sha2");
                local nl = string.char(10);
                local awsAlgorithm = "AWS4-HMAC-SHA256" ;
                local signedHeaders = "host;x-amz-content-sha256;x-amz-date";

                local awsTime =  os.date("%Y%m%dT%H%M%SZ",os.time());
                local awsDate =  awsTime:sub(0,8);
                local awsRegion = "ap-northeast-1";
                local awsService = "es";

                local httpRequestMethod = ngx.var.request_method;
                local rootUri = ngx.var.request_uri;
                local canonicalURI = rootUri;
                local canonicalQueryString = "";
                local requestPayloadHashHex = sha.sha256("");
                local credentialScope = awsDate.."/"..awsRegion.."/"..awsService.."/aws4_request";


                function hmacHex(key,value)
                    return sha.hmac(sha.sha256,sha.hex_to_bin(key),value);
                end

                function string.tohex(str)
                    return (str:gsub('.', function (c)
                        return string.format('%02X', string.byte(c))
                    end)):lower()
                end

                if nil ~= rootUri:find("?") then
                    canonicalURI = root_uri:sub(0,root_uri:find("?")-1)
                    canonicalQueryString = root_uri:sub(rootUri:find("?")+1)
                end
                if   nil ~=ngx.req.get_body_data() then
                    requestPayloadHashHex = sha.sha256(ngx.req.get_body_data())
                end
                local basicAuthDecoded =  ngx.decode_base64(string.sub(ngx.var.http_authorization,string.len("Basic ")+1));
                local awsId =  basicAuthDecoded:match(".+:",1):gsub(":","");
                local awsSecret =   basicAuthDecoded:match(":.+",2):gsub(":","")
                awsRegion = awsId:match("[^</][%w-]*[^>]",1);
                awsService = awsId:gsub("</[%w-]*>","",1):match("[^</][%w-]*[^>]",1);
                local awsHost = awsId:gsub("</[%w-]*>","",1):gsub("</[%w-]*>","",1):match("[^</][%w-._]*[^>]",1);
                awsId = awsId:gsub("</[%w-._]*>","");
                local canonicalHeaders = "host:"..awsHost..nl..
                    "x-amz-content-sha256:"..requestPayloadHashHex..nl..
                    "x-amz-date:"..awsTime..nl;
                local canonicalRequest = httpRequestMethod..nl..
                    canonicalURI..nl..
                    canonicalQueryString..nl..
                    canonicalHeaders..nl..
                    signedHeaders..nl..
                    requestPayloadHashHex;
                local stringToSign = "AWS4-HMAC-SHA256"..nl..
                    awsTime..nl..
                    credentialScope..nl..
                    sha.sha256(canonicalRequest);
                local signingKey = hmacHex(hmacHex(hmacHex(hmacHex(("AWS4"..awsSecret):tohex(),awsDate),awsRegion),awsService),"aws4_request")
                local signing = sha.hmac(sha.sha256,sha.hex_to_bin(signingKey),stringToSign);
                ngx.req.set_header("Authorization",awsAlgorithm..
                    " Credential="..awsId.."/"..credentialScope..
                    ", SignedHeaders="..signedHeaders..
                    ", Signature="..signing);
                ngx.req.set_header("X-Amz-Date", awsTime);
                ngx.req.set_header("Host",awsHost);
                ngx.req.set_header("X-Amz-Content-Sha256",requestPayloadHashHex);
                --ngx.var.proxy_header_authentication = awsAlgorithm..
                --    " Credential="..awsId.."/"..credentialScope..
                --    ", SignedHeaders="..signedHeaders..
                --    ", Signature="..signing
            }
            proxy_pass https://search-research-for-mti-project-fu4za2k6zylgfaicxyiobfngwi.ap-northeast-1.es.amazonaws.com;
        }
    }
}